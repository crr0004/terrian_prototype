!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
GAMEFACADE_H	gamefacade.h	2;"	d	language:C++
GLDEBUG_H	gldebug.h	2;"	d	language:C++
GRIDGEOMETRY_H	GridGeometry.cpp	18;"	d	language:C++	file:
GameFacade	gamefacade.h	/^		GameFacade();$/;"	p	language:C++	class:GameFacade	access:protected	signature:()
GameFacade	gamefacade.h	/^class GameFacade {$/;"	c	language:C++
GameFacade::GameFacade	gamefacade.h	/^		GameFacade();$/;"	p	language:C++	class:GameFacade	access:protected	signature:()
GameFacade::_instance	gamefacade.h	/^		static GameFacade* _instance;$/;"	m	language:C++	class:GameFacade	access:private
GameFacade::createLine	gamefacade.h	/^		Facade::Line* createLine(Geometry::Line line);$/;"	p	language:C++	class:GameFacade	access:public	signature:(Geometry::Line line)
GameFacade::instance	gamefacade.h	/^		static GameFacade* instance();$/;"	p	language:C++	class:GameFacade	access:public	signature:()
GameFacade::~GameFacade	gamefacade.h	/^		~GameFacade();$/;"	p	language:C++	class:GameFacade	access:protected	signature:()
GridGeometry.cpp	GridGeometry.cpp	1;"	F	language:C++
GridGeomtry	GridGeometry.cpp	/^		GridGeomtry(int width, int height, int rows, int columns);$/;"	p	language:C++	class:GridGeomtry	file:	access:public	signature:(int width, int height, int rows, int columns)
GridGeomtry	GridGeometry.cpp	/^class GridGeomtry{$/;"	c	language:C++	file:
GridGeomtry::GridGeomtry	GridGeometry.cpp	/^		GridGeomtry(int width, int height, int rows, int columns);$/;"	p	language:C++	class:GridGeomtry	file:	access:public	signature:(int width, int height, int rows, int columns)
GridGeomtry::columns	GridGeometry.cpp	/^		int columns;$/;"	m	language:C++	class:GridGeomtry	file:	access:private
GridGeomtry::generate	GridGeometry.cpp	/^		int* generate();$/;"	p	language:C++	class:GridGeomtry	file:	access:public	signature:()
GridGeomtry::height	GridGeometry.cpp	/^		int height;$/;"	m	language:C++	class:GridGeomtry	file:	access:private
GridGeomtry::points	GridGeometry.cpp	/^		int* points;$/;"	m	language:C++	class:GridGeomtry	file:	access:private
GridGeomtry::rows	GridGeometry.cpp	/^		int rows;$/;"	m	language:C++	class:GridGeomtry	file:	access:private
GridGeomtry::width	GridGeometry.cpp	/^		int width;$/;"	m	language:C++	class:GridGeomtry	file:	access:private
GridGeomtry::~GridGeomtry	GridGeometry.cpp	/^		~GridGeomtry();$/;"	p	language:C++	class:GridGeomtry	file:	access:public	signature:()
Instance	VisualServer.h	/^		static VisualServer* Instance();$/;"	p	language:C++	class:VisualServer	access:public	signature:()
MATRIXSTACKSINGLETON_H	matrixstacksingleton.h	2;"	d	language:C++
MatrixStackSingleton	matrixstacksingleton.h	/^		MatrixStackSingleton();$/;"	p	language:C++	class:MatrixStackSingleton	access:protected	signature:()
MatrixStackSingleton	matrixstacksingleton.h	/^class MatrixStackSingleton{$/;"	c	language:C++
MatrixStackSingleton::MatrixStackSingleton	matrixstacksingleton.h	/^		MatrixStackSingleton();$/;"	p	language:C++	class:MatrixStackSingleton	access:protected	signature:()
MatrixStackSingleton::_instance	matrixstacksingleton.h	/^		static MatrixStackSingleton* _instance;$/;"	m	language:C++	class:MatrixStackSingleton	access:private
MatrixStackSingleton::instance	matrixstacksingleton.h	/^		static MatrixStackSingleton* instance();$/;"	p	language:C++	class:MatrixStackSingleton	access:public	signature:()
MatrixStackSingleton::pop	matrixstacksingleton.h	/^		glm::mat4 pop();$/;"	p	language:C++	class:MatrixStackSingleton	access:public	signature:()
MatrixStackSingleton::push	matrixstacksingleton.h	/^		glm::mat4 push(glm::mat4 m);$/;"	p	language:C++	class:MatrixStackSingleton	access:public	signature:(glm::mat4 m)
MatrixStackSingleton::~MatrixStackSingleton	matrixstacksingleton.h	/^		~MatrixStackSingleton();$/;"	p	language:C++	class:MatrixStackSingleton	access:protected	signature:()
VISUALGRID	GridGeometry.cpp	2;"	d	language:C++	file:
VISUALSERVER_H	VisualServer.h	2;"	d	language:C++
VisualGrid	GridGeometry.cpp	/^class VisualGrid{$/;"	c	language:C++	file:
VisualGrid::WeldPoints	GridGeometry.cpp	/^		int* WeldPoints(int* points);$/;"	p	language:C++	class:VisualGrid	file:	access:public	signature:(int* points)
VisualGrid::indexCount	GridGeometry.cpp	/^		int indexCount;$/;"	m	language:C++	class:VisualGrid	file:	access:private
VisualGrid::indices	GridGeometry.cpp	/^		int* indices;$/;"	m	language:C++	class:VisualGrid	file:	access:private
VisualGrid::prepRender	GridGeometry.cpp	/^		int* prepRender();$/;"	p	language:C++	class:VisualGrid	file:	access:public	signature:()
VisualGrid::render	GridGeometry.cpp	/^		void render(int vertexAttributeIndex);$/;"	p	language:C++	class:VisualGrid	file:	access:public	signature:(int vertexAttributeIndex)
VisualServer	VisualServer.h	/^		VisualServer();$/;"	p	language:C++	class:VisualServer	access:protected	signature:()
VisualServer	VisualServer.h	/^class VisualServer{$/;"	c	language:C++
VisualServer.h	VisualServer.h	1;"	F	language:C++
VisualServer::Instance	VisualServer.h	/^		static VisualServer* Instance();$/;"	p	language:C++	class:VisualServer	access:public	signature:()
VisualServer::VisualServer	VisualServer.h	/^		VisualServer();$/;"	p	language:C++	class:VisualServer	access:protected	signature:()
VisualServer::_instance	VisualServer.h	/^		static VisualServer* _instance;$/;"	m	language:C++	class:VisualServer	access:private
WINDOW_H	window.h	2;"	d	language:C++
WeldPoints	GridGeometry.cpp	/^		int* WeldPoints(int* points);$/;"	p	language:C++	class:VisualGrid	file:	access:public	signature:(int* points)
Window	window.h	/^	Window();$/;"	p	language:C++	class:Window	access:public	signature:()
Window	window.h	/^class Window{$/;"	c	language:C++
Window::Window	window.h	/^	Window();$/;"	p	language:C++	class:Window	access:public	signature:()
Window::create	window.h	/^	bool create();$/;"	p	language:C++	class:Window	access:public	signature:()
Window::height	window.h	/^	int height;$/;"	m	language:C++	class:Window	access:public
Window::shouldClose	window.h	/^	bool shouldClose();$/;"	p	language:C++	class:Window	access:public	signature:()
Window::title	window.h	/^	char *title;$/;"	m	language:C++	class:Window	access:public
Window::width	window.h	/^	int width;$/;"	m	language:C++	class:Window	access:public
Window::window	window.h	/^		GLFWwindow *window;$/;"	m	language:C++	class:Window	access:private
Window::~Window	window.h	/^	virtual ~Window();$/;"	p	language:C++	class:Window	access:public	signature:()
_instance	VisualServer.h	/^		static VisualServer* _instance;$/;"	m	language:C++	class:VisualServer	access:private
_instance	gamefacade.h	/^		static GameFacade* _instance;$/;"	m	language:C++	class:GameFacade	access:private
_instance	matrixstacksingleton.h	/^		static MatrixStackSingleton* _instance;$/;"	m	language:C++	class:MatrixStackSingleton	access:private
columns	GridGeometry.cpp	/^		int columns;$/;"	m	language:C++	class:GridGeomtry	file:	access:private
create	window.h	/^	bool create();$/;"	p	language:C++	class:Window	access:public	signature:()
createLine	gamefacade.h	/^		Facade::Line* createLine(Geometry::Line line);$/;"	p	language:C++	class:GameFacade	access:public	signature:(Geometry::Line line)
gamefacade.h	gamefacade.h	1;"	F	language:C++
generate	GridGeometry.cpp	/^		int* generate();$/;"	p	language:C++	class:GridGeomtry	file:	access:public	signature:()
getStringForSeverity	gldebug.h	/^   static std::string getStringForSeverity(GLenum severity)$/;"	f	language:C++	class:glDebug	access:private	signature:(GLenum severity)
getStringForSource	gldebug.h	/^   static std::string getStringForSource(GLenum source)$/;"	f	language:C++	class:glDebug	access:private	signature:(GLenum source)
getStringForType	gldebug.h	/^   static std::string getStringForType(GLenum type)$/;"	f	language:C++	class:glDebug	access:private	signature:(GLenum type)
glDebug	gldebug.h	/^    glDebug(){};$/;"	f	language:C++	class:glDebug	access:public	signature:()
glDebug	gldebug.h	/^class glDebug{$/;"	c	language:C++
glDebug::getStringForSeverity	gldebug.h	/^   static std::string getStringForSeverity(GLenum severity)$/;"	f	language:C++	class:glDebug	access:private	signature:(GLenum severity)
glDebug::getStringForSource	gldebug.h	/^   static std::string getStringForSource(GLenum source)$/;"	f	language:C++	class:glDebug	access:private	signature:(GLenum source)
glDebug::getStringForType	gldebug.h	/^   static std::string getStringForType(GLenum type)$/;"	f	language:C++	class:glDebug	access:private	signature:(GLenum type)
glDebug::glDebug	gldebug.h	/^    glDebug(){};$/;"	f	language:C++	class:glDebug	access:public	signature:()
glDebug::myCallback	gldebug.h	/^   static void APIENTRY myCallback(GLenum source,$/;"	f	language:C++	class:glDebug	access:public	signature:(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *msg, GLvoid *data)
glDebug::~glDebug	gldebug.h	/^   ~glDebug(){};$/;"	f	language:C++	class:glDebug	access:public	signature:()
gldebug.h	gldebug.h	1;"	F	language:C++
height	GridGeometry.cpp	/^		int height;$/;"	m	language:C++	class:GridGeomtry	file:	access:private
height	window.h	/^	int height;$/;"	m	language:C++	class:Window	access:public
indexCount	GridGeometry.cpp	/^		int indexCount;$/;"	m	language:C++	class:VisualGrid	file:	access:private
indices	GridGeometry.cpp	/^		int* indices;$/;"	m	language:C++	class:VisualGrid	file:	access:private
instance	gamefacade.h	/^		static GameFacade* instance();$/;"	p	language:C++	class:GameFacade	access:public	signature:()
instance	matrixstacksingleton.h	/^		static MatrixStackSingleton* instance();$/;"	p	language:C++	class:MatrixStackSingleton	access:public	signature:()
matrixstacksingleton.h	matrixstacksingleton.h	1;"	F	language:C++
myCallback	gldebug.h	/^   static void APIENTRY myCallback(GLenum source,$/;"	f	language:C++	class:glDebug	access:public	signature:(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *msg, GLvoid *data)
points	GridGeometry.cpp	/^		int* points;$/;"	m	language:C++	class:GridGeomtry	file:	access:private
pop	matrixstacksingleton.h	/^		glm::mat4 pop();$/;"	p	language:C++	class:MatrixStackSingleton	access:public	signature:()
prepRender	GridGeometry.cpp	/^		int* prepRender();$/;"	p	language:C++	class:VisualGrid	file:	access:public	signature:()
push	matrixstacksingleton.h	/^		glm::mat4 push(glm::mat4 m);$/;"	p	language:C++	class:MatrixStackSingleton	access:public	signature:(glm::mat4 m)
render	GridGeometry.cpp	/^		void render(int vertexAttributeIndex);$/;"	p	language:C++	class:VisualGrid	file:	access:public	signature:(int vertexAttributeIndex)
rows	GridGeometry.cpp	/^		int rows;$/;"	m	language:C++	class:GridGeomtry	file:	access:private
shouldClose	window.h	/^	bool shouldClose();$/;"	p	language:C++	class:Window	access:public	signature:()
title	window.h	/^	char *title;$/;"	m	language:C++	class:Window	access:public
width	GridGeometry.cpp	/^		int width;$/;"	m	language:C++	class:GridGeomtry	file:	access:private
width	window.h	/^	int width;$/;"	m	language:C++	class:Window	access:public
window	window.h	/^		GLFWwindow *window;$/;"	m	language:C++	class:Window	access:private
window.h	window.h	1;"	F	language:C++
~GameFacade	gamefacade.h	/^		~GameFacade();$/;"	p	language:C++	class:GameFacade	access:protected	signature:()
~GridGeomtry	GridGeometry.cpp	/^		~GridGeomtry();$/;"	p	language:C++	class:GridGeomtry	file:	access:public	signature:()
~MatrixStackSingleton	matrixstacksingleton.h	/^		~MatrixStackSingleton();$/;"	p	language:C++	class:MatrixStackSingleton	access:protected	signature:()
~Window	window.h	/^	virtual ~Window();$/;"	p	language:C++	class:Window	access:public	signature:()
~glDebug	gldebug.h	/^   ~glDebug(){};$/;"	f	language:C++	class:glDebug	access:public	signature:()
