!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
CreateWindow	main.cpp	/^static GLFWwindow* CreateWindow(){$/;"	f	language:C++	file:	signature:()
LinkedMatrix	matrixstacksingleton.cpp	/^struct LinkedMatrix{$/;"	s	language:C++	file:
LinkedMatrix::me	matrixstacksingleton.cpp	/^	glm::mat4 me;$/;"	m	language:C++	struct:LinkedMatrix	file:	access:public
LinkedMatrix::prev	matrixstacksingleton.cpp	/^	struct LinkedMatrix* prev;$/;"	m	language:C++	struct:LinkedMatrix	typeref:struct:LinkedMatrix::LinkedMatrix	file:	access:public
MatrixStackSingleton	matrixstacksingleton.cpp	/^MatrixStackSingleton::MatrixStackSingleton(){$/;"	f	language:C++	class:MatrixStackSingleton	signature:()
MatrixStackSingleton::MatrixStackSingleton	matrixstacksingleton.cpp	/^MatrixStackSingleton::MatrixStackSingleton(){$/;"	f	language:C++	class:MatrixStackSingleton	signature:()
MatrixStackSingleton::_instance	matrixstacksingleton.cpp	/^MatrixStackSingleton* MatrixStackSingleton::_instance = 0;$/;"	m	language:C++	class:MatrixStackSingleton	file:
MatrixStackSingleton::instance	matrixstacksingleton.cpp	/^MatrixStackSingleton* MatrixStackSingleton::instance(){$/;"	f	language:C++	class:MatrixStackSingleton	signature:()
MatrixStackSingleton::pop	matrixstacksingleton.cpp	/^glm::mat4 MatrixStackSingleton::pop(){$/;"	f	language:C++	class:MatrixStackSingleton	signature:()
MatrixStackSingleton::push	matrixstacksingleton.cpp	/^glm::mat4 MatrixStackSingleton::push(glm::mat4 m){$/;"	f	language:C++	class:MatrixStackSingleton	signature:(glm::mat4 m)
MatrixStackSingleton::~MatrixStackSingleton	matrixstacksingleton.cpp	/^MatrixStackSingleton::~MatrixStackSingleton(){$/;"	f	language:C++	class:MatrixStackSingleton	signature:()
Window	window.cpp	/^Window::Window(){$/;"	f	language:C++	class:Window	signature:()
Window::Window	window.cpp	/^Window::Window(){$/;"	f	language:C++	class:Window	signature:()
Window::~Window	window.cpp	/^Window::~Window(){$/;"	f	language:C++	class:Window	signature:()
_head	matrixstacksingleton.cpp	/^struct LinkedMatrix* _head;$/;"	v	language:C++	typeref:struct:LinkedMatrix
_instance	matrixstacksingleton.cpp	/^MatrixStackSingleton* MatrixStackSingleton::_instance = 0;$/;"	m	language:C++	class:MatrixStackSingleton	file:
aspect_ratio	main.cpp	/^static GLfloat aspect_ratio = 4.0f\/3.0f;$/;"	v	language:C++	file:
check_error	main.cpp	/^static void check_error(){$/;"	f	language:C++	file:	signature:()
createHeightMap	main.cpp	/^static struct heightmap createHeightMap(int width, int height){$/;"	f	language:C++	file:	signature:(int width, int height)
error_callback	main.cpp	/^static void error_callback(int error, const char* description)$/;"	f	language:C++	file:	signature:(int error, const char* description)
furthest_point	main.cpp	/^static glm::vec4 furthest_point;$/;"	v	language:C++	file:
height	main.cpp	/^	int height;$/;"	m	language:C++	struct:heightmap	file:	access:public
height	main.cpp	/^static int height = 600;$/;"	v	language:C++	file:
heightmap	main.cpp	/^struct heightmap {$/;"	s	language:C++	file:
heightmap::height	main.cpp	/^	int height;$/;"	m	language:C++	struct:heightmap	file:	access:public
heightmap::id	main.cpp	/^	GLuint id[2];$/;"	m	language:C++	struct:heightmap	file:	access:public
heightmap::indices	main.cpp	/^	int* indices;$/;"	m	language:C++	struct:heightmap	file:	access:public
heightmap::indicesSize	main.cpp	/^	int indicesSize;$/;"	m	language:C++	struct:heightmap	file:	access:public
heightmap::vertexCount	main.cpp	/^	int vertexCount;$/;"	m	language:C++	struct:heightmap	file:	access:public
heightmap::vertices	main.cpp	/^	float* vertices;$/;"	m	language:C++	struct:heightmap	file:	access:public
heightmap::verticesSize	main.cpp	/^	int verticesSize;$/;"	m	language:C++	struct:heightmap	file:	access:public
heightmap::width	main.cpp	/^	int width;$/;"	m	language:C++	struct:heightmap	file:	access:public
id	main.cpp	/^	GLuint id[2];$/;"	m	language:C++	struct:heightmap	file:	access:public
indices	main.cpp	/^	int* indices;$/;"	m	language:C++	struct:heightmap	file:	access:public
indicesSize	main.cpp	/^	int indicesSize;$/;"	m	language:C++	struct:heightmap	file:	access:public
instance	matrixstacksingleton.cpp	/^MatrixStackSingleton* MatrixStackSingleton::instance(){$/;"	f	language:C++	class:MatrixStackSingleton	signature:()
key_callback	main.cpp	/^static void key_callback(GLFWwindow* window, int key, int scancode, int action, int mods)$/;"	f	language:C++	file:	signature:(GLFWwindow* window, int key, int scancode, int action, int mods)
main	main.cpp	/^int main(void)$/;"	f	language:C++	signature:(void)
main.cpp	main.cpp	1;"	F	language:C++
make_shader	main.cpp	/^static GLuint make_shader(GLenum type, const char* text)$/;"	f	language:C++	file:	signature:(GLenum type, const char* text)
make_shader_program	main.cpp	/^static GLuint make_shader_program(const char* vs_text, const char* fs_text)$/;"	f	language:C++	file:	signature:(const char* vs_text, const char* fs_text)
matrixstacksingleton.cpp	matrixstacksingleton.cpp	1;"	F	language:C++
me	matrixstacksingleton.cpp	/^	glm::mat4 me;$/;"	m	language:C++	struct:LinkedMatrix	file:	access:public
modelview_matrix	main.cpp	/^static glm::mat4 modelview_matrix;$/;"	v	language:C++	file:
pop	matrixstacksingleton.cpp	/^glm::mat4 MatrixStackSingleton::pop(){$/;"	f	language:C++	class:MatrixStackSingleton	signature:()
prev	matrixstacksingleton.cpp	/^	struct LinkedMatrix* prev;$/;"	m	language:C++	struct:LinkedMatrix	typeref:struct:LinkedMatrix::LinkedMatrix	file:	access:public
projection_matrix	main.cpp	/^static glm::mat4 projection_matrix;$/;"	v	language:C++	file:
push	matrixstacksingleton.cpp	/^glm::mat4 MatrixStackSingleton::push(glm::mat4 m){$/;"	f	language:C++	class:MatrixStackSingleton	signature:(glm::mat4 m)
readfile	main.cpp	/^static char* readfile(const char* filePath){$/;"	f	language:C++	file:	signature:(const char* filePath)
vertexCount	main.cpp	/^	int vertexCount;$/;"	m	language:C++	struct:heightmap	file:	access:public
vertices	main.cpp	/^	float* vertices;$/;"	m	language:C++	struct:heightmap	file:	access:public
verticesSize	main.cpp	/^	int verticesSize;$/;"	m	language:C++	struct:heightmap	file:	access:public
view_angle	main.cpp	/^static GLfloat view_angle = 45.0f;$/;"	v	language:C++	file:
width	main.cpp	/^	int width;$/;"	m	language:C++	struct:heightmap	file:	access:public
width	main.cpp	/^static int width = 800;$/;"	v	language:C++	file:
window.cpp	window.cpp	1;"	F	language:C++
z_far	main.cpp	/^static GLfloat z_far = 100.f;$/;"	v	language:C++	file:
z_near	main.cpp	/^static GLfloat z_near = 0.1f;$/;"	v	language:C++	file:
~MatrixStackSingleton	matrixstacksingleton.cpp	/^MatrixStackSingleton::~MatrixStackSingleton(){$/;"	f	language:C++	class:MatrixStackSingleton	signature:()
~Window	window.cpp	/^Window::~Window(){$/;"	f	language:C++	class:Window	signature:()
