Programatic heightmap building techniques

Invariants:
When listing all vertices, the order is not important
Building the triangles relies on the indices
Each vertex, expect those on the side, will have 4 indices refering. Those on the corner will have 1. Those on the sides will have 2. 
The work will come from using shared vertices properly

1.
Deal with shared vertices as they come.
Issue comes in as we try to insert the index in the right part of the array
Each triangle has 3 vertices
Can you create each triangle and then translate/rotate them to the correct position?
So if 1,1,1 is the origin and you need another vertex counter-clockwise.

1.5
What if we consider each square rather than each triangle?
What if we just build the inside part, as they all share 4, and then the sides & corners after?

1.5.0
Building the inside. All vertices have 4 indices refering.
1.5.1 - Square building
If you have i,j,k and each vertex is going to be:
1. (i,j,k)+(0,0,0)
2. (i,j,k)+(1,0,0)
3. (i,j,k)+(0,1,0)
4. (i,j,k)+(1,1,0)
1.5.2 Positve Adjacent squares
Moving the square (1,0,0) means the shared are
2,4
Moving the square (0,1,0) means the shared are
3,4
Moving the square (1,1,0) means the shared are
4
1 is shared from the previous square at (-1,-1,0)
	Which from the reference of the other sqaure is (1,1,0)
Bemindful that the other indices (to reach 4) come from squares around

1.6.0
Using the idea built upon in 1.5.0 we can extend it to a general case.

If we start with the first (top left in this case) square and extend rightwards,
we can use the first method to deal with the vertices as they come.

For progressing downwards, we keep track of the first square in the row,
then we use the same logic for going right, to go down one, then progress right.

By progressing one square at a time using 1.5.0 we can know which vertices
will be shared. The current sqaure doesn't need to know where the next shared
index will be placed because each square gets the needed shared indices
from the previous square.

1.6.1
If we say the origin is 0,0,0
we need to keep track of: 
	first square in row
	previous square
	square above current square
	
we can calculate the position of the square above us by knowing
	how far into the current row we are,
	how large the previous row is,
	that each square takes 6 indices
Then we want to be a sqaure.

we progress from bottom left, right, up, then, left, down, we've built a square.
we've moved right from the previous square, so all the points on the left edge are shared.
all the edges on the top are also shared from the previous row.
We know a vertex doesn't exist when we try to access a non-valid point in the
previous indices.

so if we say indicesArray is all the current indices
verticesArray is all the curret vertices
loop
index 0. previous square, index 0
index 1. vertex of index 0 + (1,0,0)
index 2. previous row, above square, index 1
index 3. index 2
index 4. previous row, above square, index 0
index 5. index 0

2.
Build each triangle one at a time and create new vertices if they don't exist already
How do you determine if a vertex already exists?
Use a hash?
